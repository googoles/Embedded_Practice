;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0

	.DSEG
;void segment(unsigned int number)
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0017 unsigned int Buff, i;
; 0000 0018 unsigned char D1000, D100, D10, D1;
; 0000 0019 
; 0000 001A D1000 = number/1000;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;	number -> Y+8
;	Buff -> R16,R17
;	i -> R18,R19
;	D1000 -> R21
;	D100 -> R20
;	D10 -> Y+7
;	D1 -> Y+6
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001B Buff = number % 1000;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001C D100 = Buff / 100;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001D Buff = Buff % 100;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 001E D10 = Buff / 10;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001F D1 = Buff % 10;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0020 
; 0000 0021 for (i = 0; i <10; i++)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0022 {
; 0000 0023 S1; // 첫 번째 FND를 ON 시킨다.
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0024 FND = Font[D1000]; // 천의 자리수를 출력한다.
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0025 delay_us(500);
;PCODE: $00000040 VOL: 0
; 0000 0026 FND = 0xff;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0027 S2; // 두 번째 FND를 ON 시킨다.
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0028 FND = Font[D100]; // 백의 자리수를 출력한다.
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0029 delay_us(500);
;PCODE: $00000050 VOL: 0
; 0000 002A FND = 0xff;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 002B S3; // 세 번째 FND를 ON 시킨다.
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 002C FND = Font[D10]; // 십의 자리수를 출력한다.
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 002D delay_us(500);
;PCODE: $00000060 VOL: 0
; 0000 002E FND = 0xff;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 002F S4; // 네 번째 FND를 ON 시킨다.
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0030 FND = Font[D1]; // 일의 자리수를 출력한다.
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0031 delay_us(500);
;PCODE: $00000070 VOL: 0
; 0000 0032 FND = 0xff;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0033 }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0034 
; 0000 0035 }
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;void Port_init(void)
; 0000 0039 {
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 003A DDRB = 0xff; // 포트 A를 출력으로 설정한다.
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 003B DDRA = 0xff; // 포트 B를 출력으로 설정한다.
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 003C }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;void main(void)
; 0000 003F {
;PCODE: $00000084 VOL: 0
; 0000 0040 Port_init();
;PCODE: $00000085 VOL: 0
; 0000 0041 Q0=Q1=Q2=Q3=0; // 모든 FND(0~3)를 선택(ON)한다.
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0042 while(1)
;PCODE: $0000008E VOL: 0
; 0000 0043 {
; 0000 0044 count++;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0045 segment(count);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0046 if(count == 9999) count = 0;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0047 }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0048 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
